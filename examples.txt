(deftest ruby-test
  (are [ruby clj] (= ruby (prettify-expression :ruby clj))
       "my_var = ['1', 2, [:inner, 'ha']]" '(def my-var ["1" 2 [:inner "ha"]])
       "their_var = ['1', 2, [:inner, 'he', ['innermost', 3]]]" '(def their-var '("1" 2 [:inner "he" ("innermost" 3)]))
       "your_var = [1, '2', nil, [nil, [nil]]]" '(def your-var '(1 "2" nil (nil [nil])))
       "x = {:a => 3, :b => 'u', :inner => {:key => :value}}" '(def x {:a 3, :b "u", :inner {:key :value}})
       "assert_equal(3, fib(4))" '(assert-equal 3 (fib 4))
       "assert(!false)" '(assert (not false))))

(deftest javascript-test
  (are [javascript clj] (= javascript (prettify-expression :javascript clj))
       "var myVar = ['1', 2, ['inner', 'ha']];" '(def my-var ["1" 2 [:inner "ha"]])
       "var theirVar = ['1', 2, ['inner', 'he', ['innermost', 3]]];" '(def their-var '("1" 2 [:inner "he" ("innermost" 3)]))
       "var yourVar = [1, '2', null, [null, [null]]];" '(def your-var '(1 "2" nil (nil [nil])))
       "var x = {'a': 3, 'b': 'u', 'inner': {'key': 'value'}};" '(def x {:a 3, :b :u, :inner {:key :value}})
       "assertEqual(3, fib(4));" '(assert-equal 3 (fib 4))
       "assert(!false);" '(assert (not false))))

(deftest python-test
  (are [python clj] (= python (prettify-expression :python clj))
       "my_var = ['1', 2, ['inner', 'ha']]" '(def my-var ["1" 2 [:inner "ha"]])
       "their_var = ['1', 2, ['inner', 'he', ['innermost', 3]]]" '(def their-var '("1" 2 [:inner "he" ("innermost" 3)]))
       "your_var = [1, '2', None, [None, [None]]]" '(def your-var '(1 "2" nil (nil [nil])))
       "x = {'a': 3, 'b': 'u', 'inner': {'key': 'value'}}" '(def x {:a 3, :b "u", :inner {:key :value}})
       "assert_equal(3, fib(4))" '(assert-equal 3 (fib 4))
       "assert(not False)" '(assert (not false))))